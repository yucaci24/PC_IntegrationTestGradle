pipeline {
  //where and how to execute the Pipeline
  agent any
  
  //configuring Pipeline-specific options from within the Pipeline itself
  options {
    buildDiscarder(logRotator(numToKeepStr: '3')) //Persist artifacts and console output for the specific number of recent Pipeline runs.
    disableConcurrentBuilds() //Disallow concurrent executions of the Pipeline
    timestamps() //Prepend all console output generated by the Pipeline run with the time at which the line was emitted
  }
  
  //A section defining tools to auto-install and put on the PATH
  tools {
    jdk 'JDK8'
    gradle 'Gradle4.5'
  }
  
  triggers {
    pollSCM('@hourly')
  }

  stages{
    stage('Checkout') {
        steps{
            echo "------------>Checkout<------------"
            git branch: 'master', credentialsId: 'GitHub_yucaci24', url: 'https://github.com/yucaci24/PC_IntegrationTestGradle'
            sh 'gradle clean'
        }
    }

    stage('Unit Tests') {
        steps{
            echo "------------>Unit Tests<------------"
            sh 'gradle test'
        }
    }

    stage('Build') {
        steps {
            echo "------------>Build<------------"
            sh 'gradle build -x test'
        }
    }
   }

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'

        }
        failure {
            echo 'This will run only if failed'
            //send notifications about a Pipeline to an email
            mail (
                to: 'yuliana.canas@ceiba.com.co',
                subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                body: "Something is wrong with ${env.BUILD_URL}")
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'           
        }
    }
}
